[{"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/index.js":"1","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/reportWebVitals.js":"2","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/App.js":"3","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/button/Button.js":"4","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/main_page/MainPage.js":"5","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/user_list/UserPageList.js":"6","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js":"7"},{"size":504,"mtime":1621347486264,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1621325958370,"results":"10","hashOfConfig":"9"},{"size":5696,"mtime":1621596265931,"results":"11","hashOfConfig":"9"},{"size":241,"mtime":1621589128685,"results":"12","hashOfConfig":"9"},{"size":760,"mtime":1621595954186,"results":"13","hashOfConfig":"9"},{"size":5963,"mtime":1621804974508,"results":"14","hashOfConfig":"9"},{"size":4545,"mtime":1621806635510,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"m0kc42",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/index.js",[],["33","34"],"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/reportWebVitals.js",[],"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/App.js",["35","36"],"import React, {useState, useEffect} from \"react\";\nimport './App.scss';\nimport 'firebase/auth';\nimport firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport {Button} from \"./components/button/Button\";\nimport \"./App.scss\";\nimport {MainPage} from \"./components/main_page/MainPage\";\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyDiGHuehmVjeTB08DcTVueINPfnZ6atwTQ\",\n    authDomain: \"message-appk.firebaseapp.com\",\n    projectId: \"message-appk\",\n    storageBucket: \"message-appk.appspot.com\",\n    messagingSenderId: \"1088403228949\",\n    appId: \"1:1088403228949:web:df373df2e84773f654c11c\"\n});\n\nconst auth = firebase.auth();\nconst messageDB = firebase.firestore();\n\nexport const App = () => {\n    const [user, setUser] = useState(() => auth.currentUser)\n    const [initializing, setInitializing] = useState(true);\n    const [active, setActive] = useState(false);\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                setUser(user);\n\n                const {uid, displayName, photoURL} = user;\n\n                messageDB.collection('users').doc(`${uid}`).set({\n                    name: displayName,\n                    photo: photoURL,\n                    uid: uid\n                })\n\n            } else {\n                setUser(null);\n            }\n            if (initializing) {\n                setInitializing(false);\n            }\n        })\n\n        return unsubscribe;\n    }, [initializing])\n\n    // const checkUser = users => {\n    //     const test = users.some(user1 => {\n    //         return user1.uid.includes(user.uid);\n    //     })\n    //     console.log(auth);\n    // }\n\n    const signIn = async () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.useDeviceLanguage();\n\n        try {\n            await auth.signInWithPopup(provider);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const signOut = async () => {\n        try {\n            await firebase.auth().signOut();\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    const toggleClass = event => {\n        event.preventDefault();\n        setActive(!active);\n\n    }\n    if (initializing) return \"Loading...\";\n\n    return (\n        <>\n            {\n                user ?\n                    <div className=\"page\">\n                        <header className=\"app__header\">\n                            <div className=\"container\">\n                                <button onClick={toggleClass} className=\"hamburger\">\n                                    <span/>\n                                    <span/>\n                                    <span/>\n                                </button>\n                                <div className=\"logo\">\n                                    <h1 className=\"logo-title\">\n                                        <strong>Super</strong>\n                                        <span>Message app</span>\n                                    </h1>\n                                </div>\n                                <nav className=\"app__header-nav\">\n                                    <ul className=\"nav-list\">\n                                        <li className=\"nav-list-text\">\n                                            <Button onClick={signOut}>Sign Out</Button>\n                                        </li>\n                                        <li className=\"nav-list-text\">\n                                            <a href=\"\"><img src={user.photoURL}/></a>\n                                        </li>\n\n                                    </ul>\n                                </nav>\n                            </div>\n                        </header>\n                        <MainPage user={user} messageDB={messageDB} active={active}/>\n                    </div>\n                    :\n                    <div className=\"page\">\n                        <header className=\"app__header\">\n                            <div className=\"container\">\n                                <div className=\"logo\">\n                                    <h1 className=\"logo-title\">\n                                        <strong>Super</strong>\n                                        <span>Message app</span>\n                                    </h1>\n                                </div>\n                                <nav className=\"app__header-nav\">\n                                    <ul className=\"nav-list\">\n                                        <li className=\"nav-list-text\">\n                                            <Button onClick={signIn}>Sign In</Button>\n                                        </li>\n                                    </ul>\n                                </nav>\n                            </div>\n                        </header>\n                        <div className=\"main__page_signout\">\n                            <div className=\"main__page_signout-text\">\n                                <h1 className=\"logo-title\">\n                                    <strong>Super</strong>\n                                    <span>Message app</span>\n                                </h1>\n                                <h1>Sign in to use application</h1>\n                            </div>\n                        </div>\n                        <section>\n                            <div className=\"wave wave1\"/>\n                            <div className=\"wave wave2\"/>\n                            <div className=\"wave wave3\"/>\n                            <div className=\"wave wave4\"/>\n                        </section>\n                    </div>\n            }\n        </>\n    );\n}\n","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/button/Button.js",[],"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/main_page/MainPage.js",[],"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/user_list/UserPageList.js",["37","38","39"],"import React, {useState, useEffect} from \"react\";\nimport \"./UserPageList.scss\";\nimport logo from \"../../images/search.svg\";\nimport {Chat} from \"../chat/Chat\";\n\nexport const UserPageList = ({user, messageDB, active}) => {\n\n    const [users, setUsers] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [messageID, setMessageID] = useState();\n    const [image, setImage] = useState();\n    const [name, setName] = useState();\n\n    useEffect(() => {\n        if (messageDB) {\n            messageDB.collection('users').onSnapshot(querySnapshot => {\n                const data = querySnapshot.docs.map(doc => ({\n                    ...doc.data(),\n                    id: doc.id,\n                }))\n                setUsers(data);\n            })\n            messageDB.collection('messages').onSnapshot(querySnapshot => {\n                const data = querySnapshot.docs.map(doc => ({\n                    ...doc.data(),\n                    id: doc.id\n                }))\n                setMessages(data);\n            })\n        }\n    }, [messageDB]);\n\n    const getUser = chatUser => {\n        if (messages.length > 0) {\n            messages.forEach(message => {\n                if (message.userFirstID === chatUser.uid || message.userSecondID === user.uid) {\n                    messageDB.collection('messages').doc(`${user.uid}${chatUser.uid}`).set({\n                        userSecondID: user.uid,\n                        userFirstID: chatUser.uid\n                    })\n                }\n            })\n        } else {\n            messageDB.collection('messages').doc(`${user.uid}${chatUser.uid}`).set({\n                userSecondID: user.uid,\n                userFirstID: chatUser.uid\n            })\n        }\n    }\n\n    const getChatID = (chatID, event, checkedUser, checkedUser2) => {\n        event.preventDefault();\n        setMessageID(chatID);\n\n        if (user.uid === checkedUser2.uid) {\n            setImage(checkedUser.photo);\n            setName(checkedUser.name);\n        } else {\n            setImage(checkedUser2.photo);\n            setName(checkedUser2.name);\n        }\n\n    }\n\n\n    return (\n        <>\n            <div className={active ? `user__page-list show` : `user__page-list`}>\n                <div className=\"users__list\">\n                    <h1>Users</h1>\n                    <ul>\n                        <li className=\"user-search\"><a href=\"#\"><img src={logo} alt=\"search\"/></a></li>\n                        {\n                            users.map(logged_user => {\n                                return (\n                                    <>\n                                        {\n                                            logged_user.uid !== user.uid ?\n                                                <li key={logged_user.id} className=\"user-logo\">\n                                                    <button onClick={() => getUser(logged_user)}><img\n                                                        src={logged_user.photo} alt=\"photo\"/>\n                                                    </button>\n                                                </li>\n                                                :\n                                                null\n                                        }\n\n                                    </>\n                                )\n                            })\n                        }\n\n                    </ul>\n                </div>\n                <ul className=\"user-list\">\n                    <h1 className=\"user-list-title\">Messages</h1>\n                    {\n                        messages.map(chat => {\n                            const checkedUser = users.filter(user => user.uid === chat.userFirstID);\n                            const checkedUser2 = users.filter(user => user.uid === chat.userSecondID);\n\n                            return (\n                                <>\n                                    {\n                                        chat.userFirstID === user.uid || chat.userSecondID === user.uid ?\n                                            <li key={chat.id}>\n                                                <a onClick={event => getChatID(chat.id, event, checkedUser[0], checkedUser2[0])}\n                                                   href=\"\"\n                                                   className=\"users\">\n                                                    <img src={\n                                                        user.uid === chat.userFirstID ? checkedUser2[0].photo : checkedUser[0].photo\n                                                    } alt=\"avatar\"/>\n                                                    <div className=\"user-description\">\n                                                        <h1 className=\"user-desc-unread\">\n                                                            {\n                                                                user.uid === chat.userFirstID ? checkedUser2[0].name : checkedUser[0].name\n                                                            }\n                                                        </h1>\n                                                    </div>\n                                                </a>\n                                            </li>\n                                            :\n                                            null\n                                    }\n\n                                </>\n\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n            {\n                messageID ?\n                    <Chat user={user}\n                          messageDB={messageDB}\n                          messageID={messageID}\n                          image={image}\n                          name={name}\n                          active={active}/>\n                    :\n                    null\n            }\n        </>\n    )\n}","/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":108,"column":45,"nodeType":"46","endLine":108,"endColumn":56},{"ruleId":"47","severity":1,"message":"48","line":108,"column":56,"nodeType":"46","endLine":108,"endColumn":82},{"ruleId":"44","severity":1,"message":"45","line":72,"column":53,"nodeType":"46","endLine":72,"endColumn":65},{"ruleId":"49","severity":1,"message":"50","line":80,"column":98,"nodeType":"46","endLine":81,"endColumn":94},{"ruleId":"44","severity":1,"message":"45","line":107,"column":49,"nodeType":"46","endLine":109,"endColumn":70},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]