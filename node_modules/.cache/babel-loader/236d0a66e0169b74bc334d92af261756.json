{"ast":null,"code":"var _jsxFileName = \"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Chat.scss\";\nimport send from \"../../images/send.svg\";\nimport { formatRelative } from 'date-fns';\nimport firebase from \"firebase/app\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = ({\n  user,\n  messageDB,\n  messageID,\n  image,\n  name,\n  getDate\n}) => {\n  _s();\n\n  const [message, setMessage] = useState([]);\n  const [newMessages, setNewMessages] = useState('');\n  const {\n    uid,\n    displayName,\n    photoURL\n  } = user;\n  useEffect(() => {\n    if (messageDB) {\n      messageDB.collection('messages').doc(`${messageID}`).collection('message').orderBy('date').onSnapshot(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => ({ ...doc.data(),\n          id: doc.id\n        }));\n        setMessage(data);\n      });\n    }\n  }, [messageDB]);\n  getDate(message);\n\n  const onChange = e => {\n    setNewMessages(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (messageDB) {\n      messageDB.collection('messages').doc(`${messageID}`).collection('message').add({\n        text: newMessages,\n        date: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        displayName,\n        photoURL\n      });\n    }\n\n    setNewMessages(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__users\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: message.map(message => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: uid === message.uid ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `messages__left`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"main__message\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: formatRelative(new Date(message.date * 1000), new Date())\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: message.photoURL,\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 49\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `messages__right`,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: message.photoURL,\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"main__message\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: // formatRelative(new Date(message.date * 1000), new Date())\n                  new Date(message.date * 1000).toLocaleTimeString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 49\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 45\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        className: \"send__messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: onChange,\n          type: \"text\",\n          value: newMessages,\n          placeholder: \"Type Your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: send\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chat, \"dsUff+hQsIpVQYNDDHsIRfL89s4=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js"],"names":["React","useState","useEffect","formatRelative","firebase","Chat","user","messageDB","messageID","image","name","getDate","message","setMessage","newMessages","setNewMessages","uid","displayName","photoURL","collection","doc","orderBy","onSnapshot","querySnapshot","data","docs","map","id","onChange","e","target","value","onSubmit","preventDefault","add","text","date","firestore","FieldValue","serverTimestamp","Date","toLocaleTimeString","send"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Chat.scss\";\nimport send from \"../../images/send.svg\";\nimport {formatRelative} from 'date-fns';\nimport firebase from \"firebase/app\";\n\nexport const Chat = ({user, messageDB, messageID, image, name, getDate}) => {\n\n    const [message, setMessage] = useState([]);\n    const [newMessages, setNewMessages] = useState('');\n\n    const {uid, displayName, photoURL} = user;\n\n    useEffect(() => {\n        if (messageDB) {\n            messageDB.collection('messages').doc(`${messageID}`).collection('message').orderBy('date').onSnapshot(querySnapshot => {\n                const data = querySnapshot.docs.map(doc => ({\n                    ...doc.data(),\n                    id: doc.id,\n                }))\n                setMessage(data);\n            })\n        }\n\n    }, [messageDB]);\n\n    getDate(message);\n\n    const onChange = e => {\n        setNewMessages(e.target.value);\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        if (messageDB) {\n            messageDB.collection('messages').doc(`${messageID}`).collection('message').add({\n                text: newMessages,\n                date: firebase.firestore.FieldValue.serverTimestamp(),\n                uid,\n                displayName,\n                photoURL\n            })\n        }\n        setNewMessages(\"\");\n    }\n\n    return (\n        <>\n            <div className=\"chat\">\n                <div className=\"chat__users\">\n                    <img src={image}/>\n                    <p>{name}</p>\n                </div>\n                <div className=\"messages\">\n                    {\n                        message.map(message => {\n                            return (\n                                <>\n                                    {\n                                        uid === message.uid ?\n                                            <div key={message.id} className={`messages__left`}>\n                                                <div className=\"message\">\n                                                    <p className=\"main__message\">{message.text}</p>\n                                                    <p>{formatRelative(new Date(message.date * 1000), new Date())}</p>\n                                                </div>\n                                                <img src={message.photoURL} alt={\"avatar\"}/>\n                                            </div>\n                                            :\n                                            <div key={message.id} className={`messages__right`}>\n                                                <img src={message.photoURL} alt={\"avatar\"}/>\n                                                <div className=\"message\">\n                                                    <p className=\"main__message\">{message.text}</p>\n                                                    <p>\n                                                        {\n                                                            // formatRelative(new Date(message.date * 1000), new Date())\n                                                            new Date(message.date * 1000).toLocaleTimeString()\n                                                        }\n                                                    </p>\n                                                </div>\n                                            </div>\n                                    }\n                                </>\n                            )\n                        })\n                    }\n                </div>\n                <form onSubmit={onSubmit} className=\"send__messages\">\n                    <input onChange={onChange} type=\"text\" value={newMessages} placeholder=\"Type Your message...\"/>\n                    <button><img src={send}/></button>\n                </form>\n            </div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}