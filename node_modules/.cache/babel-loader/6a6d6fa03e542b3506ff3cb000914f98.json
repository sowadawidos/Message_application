{"ast":null,"code":"var _jsxFileName = \"/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Chat.scss\";\nimport send from \"../../images/send.svg\";\nimport { formatRelative } from 'date-fns';\nimport firebase from \"firebase/app\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = ({\n  user,\n  messageDB,\n  messageID,\n  messages,\n  users\n}) => {\n  _s();\n\n  const [message, setMessage] = useState([]);\n  const [newMessages, setNewMessages] = useState('');\n  const {\n    uid,\n    displayName,\n    photoURL\n  } = user;\n  useEffect(() => {\n    if (messageDB) {\n      messageDB.collection('messages').doc(`${messageID}`).collection('message').orderBy('date').onSnapshot(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => ({ ...doc.data(),\n          id: doc.id\n        }));\n        setMessage(data);\n      });\n    }\n  }, [messageDB]);\n\n  const onChange = e => {\n    setNewMessages(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (messageDB) {\n      messageDB.collection('messages').doc(`${messageID}`).collection('message').add({\n        text: newMessages,\n        date: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        displayName,\n        photoURL\n      });\n    }\n\n    setNewMessages(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat\",\n      children: [messages.map(chat => {\n        console.log(chat);\n        const image = users.map(el => el.uid === chat.userFirstID ? el.photo : null);\n        const name = users.map(el => {\n          console.log(el); // el.uid === chat.userFirstID ? el.name : null\n\n          if (el.uid === chat.userFirstID) {\n            return el.name;\n          } else {\n            return null;\n          }\n        });\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat__users\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)\n        }, void 0, false);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: message.map(message => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: uid === message.uid ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `messages__left`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"main__message\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: message.photoURL,\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 49\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `messages__right`,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: message.photoURL,\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"main__message\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 49\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 45\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        className: \"send__messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: onChange,\n          type: \"text\",\n          value: newMessages,\n          placeholder: \"Type Your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: send\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chat, \"dsUff+hQsIpVQYNDDHsIRfL89s4=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/dawidsowinski/Desktop/CodersLab_Kurs/Message_application/src/components/chat/Chat.js"],"names":["React","useState","useEffect","formatRelative","firebase","Chat","user","messageDB","messageID","messages","users","message","setMessage","newMessages","setNewMessages","uid","displayName","photoURL","collection","doc","orderBy","onSnapshot","querySnapshot","data","docs","map","id","onChange","e","target","value","onSubmit","preventDefault","add","text","date","firestore","FieldValue","serverTimestamp","chat","console","log","image","el","userFirstID","photo","name","send"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Chat.scss\";\nimport send from \"../../images/send.svg\";\nimport {formatRelative} from 'date-fns';\nimport firebase from \"firebase/app\";\n\nexport const Chat = ({user, messageDB, messageID, messages, users}) => {\n\n    const [message, setMessage] = useState([]);\n    const [newMessages, setNewMessages] = useState('');\n\n    const {uid, displayName, photoURL} = user;\n\n    useEffect(() => {\n        if (messageDB) {\n            messageDB.collection('messages').doc(`${messageID}`).collection('message').orderBy('date').onSnapshot(querySnapshot => {\n                const data = querySnapshot.docs.map(doc => ({\n                    ...doc.data(),\n                    id: doc.id,\n                }))\n                setMessage(data);\n            })\n        }\n    }, [messageDB]);\n\n    const onChange = e => {\n        setNewMessages(e.target.value);\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        if (messageDB) {\n            messageDB.collection('messages').doc(`${messageID}`).collection('message').add({\n                text: newMessages,\n                date: firebase.firestore.FieldValue.serverTimestamp(),\n                uid,\n                displayName,\n                photoURL\n            })\n        }\n        setNewMessages(\"\");\n    }\n\n    return (\n        <>\n            <div className=\"chat\">\n                {\n                    messages.map(chat => {\n                        console.log(chat);\n                        const image = users.map(el => el.uid === chat.userFirstID ? el.photo : null )\n                        const name = users.map(el => {\n                            console.log(el);\n                            // el.uid === chat.userFirstID ? el.name : null\n                            if (el.uid === chat.userFirstID) {\n                                return el.name\n                            } else {\n                                return null;\n                            }\n                        })\n\n                        return (\n                            <>\n                                <div className=\"chat__users\">\n                                    <img src={image}/>\n                                    <p>{name}</p>\n                                </div>\n                            </>\n                        )\n\n                    })\n                }\n                <div className=\"messages\">\n                    {\n                        message.map(message => {\n                            return (\n                                <>\n                                    {\n                                        uid === message.uid ?\n                                            <div key={message.id} className={`messages__left`}>\n                                                <div className=\"message\">\n                                                    <p className=\"main__message\">{message.text}</p>\n                                                    {/*<p>{formatRelative(new Date(message.date.seconds * 1000), new Date())}</p>*/}\n                                                </div>\n                                                <img src={message.photoURL} alt={\"avatar\"}/>\n                                            </div>\n                                            :\n                                            <div key={message.id} className={`messages__right`}>\n                                                <img src={message.photoURL} alt={\"avatar\"}/>\n                                                <div className=\"message\">\n                                                    <p className=\"main__message\">{message.text}</p>\n                                                    {/*<p>{formatRelative(new Date(message.date.seconds * 1000), new Date())}</p>*/}\n                                                </div>\n                                            </div>\n                                    }\n                                </>\n                            )\n                        })\n                    }\n                </div>\n                <form onSubmit={onSubmit} className=\"send__messages\">\n                    <input onChange={onChange} type=\"text\" value={newMessages} placeholder=\"Type Your message...\"/>\n                    <button><img src={send}/></button>\n                </form>\n            </div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}